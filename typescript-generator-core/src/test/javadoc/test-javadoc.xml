<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <package name="cz.habarta.typescript.generator">
        <annotation name="OptionalAnnotationTest.NullableType" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.NullableType" scope="public" included="true">
            <annotation name="Retention" qualified="java.lang.annotation.Retention">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.annotation.RetentionPolicy"/>
                    <value>RUNTIME</value>
                </argument>
            </annotation>
            <annotation name="Target" qualified="java.lang.annotation.Target">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.annotation.ElementType" dimension="[]"/>
                    <value>java.lang.annotation.ElementType.TYPE_USE</value>
                    <value>java.lang.annotation.ElementType.TYPE_PARAMETER</value>
                </argument>
            </annotation>
        </annotation>
        <annotation name="OptionalAnnotationTest.TypescriptOptional" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.TypescriptOptional" scope="public" included="true">
            <annotation name="Retention" qualified="java.lang.annotation.Retention">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.annotation.RetentionPolicy"/>
                    <value>RUNTIME</value>
                </argument>
            </annotation>
        </annotation>
        <annotation name="OptionalAnnotationTest.MarkerAnnotation" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.MarkerAnnotation" scope="public" included="true">
            <annotation name="Retention" qualified="java.lang.annotation.Retention">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.annotation.RetentionPolicy"/>
                    <value>RUNTIME</value>
                </argument>
            </annotation>
        </annotation>
        <annotation name="NumberEnumTest.SomeNonConstAnnotation" qualified="cz.habarta.typescript.generator.NumberEnumTest.SomeNonConstAnnotation" scope="public" included="true">
            <annotation name="Retention" qualified="java.lang.annotation.Retention">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.annotation.RetentionPolicy"/>
                    <value>RUNTIME</value>
                </argument>
            </annotation>
            <annotation name="Target" qualified="java.lang.annotation.Target">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.annotation.ElementType" dimension="[]"/>
                    <value>java.lang.annotation.ElementType.TYPE</value>
                </argument>
            </annotation>
        </annotation>
        <enum name="TestEnums.StandardEnum" qualified="cz.habarta.typescript.generator.TestEnums.StandardEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.StandardEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.GeneralMethodValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.GeneralMethodValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.GeneralMethodValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.NumberFieldValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.NumberFieldValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.NumberFieldValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.NumberMethodValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.NumberMethodValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.NumberMethodValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.ToStringValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.ToStringValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.ToStringValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.StringPropertyValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.StringPropertyValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.StringPropertyValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.NumberPropertyValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.NumberPropertyValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.NumberPropertyValuedEnum"/>
            </class>
            <constant name="A"/>
            <constant name="B"/>
            <constant name="C"/>
        </enum>
        <enum name="TestEnums.JsonPropertyValuedEnum" qualified="cz.habarta.typescript.generator.TestEnums.JsonPropertyValuedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.TestEnums.JsonPropertyValuedEnum"/>
            </class>
            <constant name="A">
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>_A</value>
                    </argument>
                </annotation>
            </constant>
            <constant name="B">
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>_B</value>
                    </argument>
                </annotation>
            </constant>
            <constant name="C">
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>_C</value>
                    </argument>
                </annotation>
            </constant>
        </enum>
        <enum name="CustomTypeMappingTest.MyEnum" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.MyEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.MyEnum"/>
            </class>
            <interface qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue"/>
            <constant name="MY_FIRST_VALUE"/>
        </enum>
        <enum name="NumberEnumTest.SomeCode" qualified="cz.habarta.typescript.generator.NumberEnumTest.SomeCode" scope="public" included="true">
            <comment>Documentation for SomeCode enum.</comment>
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.NumberEnumTest.SomeCode"/>
            </class>
            <constant name="VALUE0">
                <comment>Documentation for VALUE0.</comment>
            </constant>
            <constant name="VALUE1">
                <comment>Documentation for VALUE1.</comment>
            </constant>
            <annotation name="JsonFormat" qualified="com.fasterxml.jackson.annotation.JsonFormat">
                <argument name="shape" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonFormat.Shape"/>
                    <value>NUMBER_INT</value>
                </argument>
            </annotation>
            <annotation name="NumberEnumTest.SomeNonConstAnnotation" qualified="cz.habarta.typescript.generator.NumberEnumTest.SomeNonConstAnnotation"/>
        </enum>
        <enum name="JaxrsApplicationTest.TargetEnum" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.TargetEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.TargetEnum"/>
            </class>
            <constant name="Target1"/>
            <constant name="Target2"/>
        </enum>
        <enum name="EnumConstantsExtensionTest.Emotions" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest.Emotions" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest.Emotions"/>
            </class>
            <constant name="Happy"/>
        </enum>
        <enum name="EnumTest.StatusType" qualified="cz.habarta.typescript.generator.EnumTest.StatusType" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.EnumTest.StatusType"/>
            </class>
            <constant name="GOOD"/>
            <constant name="FULL"/>
            <annotation name="JsonFormat" qualified="com.fasterxml.jackson.annotation.JsonFormat">
                <argument name="shape" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonFormat.Shape"/>
                    <value>OBJECT</value>
                </argument>
            </annotation>
        </enum>
        <enum name="EnumTest.MixedEnum" qualified="cz.habarta.typescript.generator.EnumTest.MixedEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.EnumTest.MixedEnum"/>
            </class>
            <constant name="NUMBER"/>
            <constant name="STRING"/>
        </enum>
        <enum name="EnumTest.NumberEnum" qualified="cz.habarta.typescript.generator.EnumTest.NumberEnum" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.EnumTest.NumberEnum"/>
            </class>
            <constant name="VALUE0"/>
            <constant name="VALUE1"/>
            <annotation name="JsonFormat" qualified="com.fasterxml.jackson.annotation.JsonFormat">
                <argument name="shape" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonFormat.Shape"/>
                    <value>NUMBER_INT</value>
                </argument>
            </annotation>
        </enum>
        <enum name="JsonDeserializationTest.Authentication" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Authentication" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Authentication"/>
            </class>
            <constant name="Password"/>
            <constant name="Token"/>
            <constant name="Fingerprint"/>
            <constant name="Voice"/>
        </enum>
        <enum name="DummyEnum" qualified="cz.habarta.typescript.generator.DummyEnum" scope="public" included="true">
            <comment>Documentation for DummyEnum.</comment>
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.DummyEnum"/>
            </class>
            <constant name="Red">
                <comment>ff0000</comment>
            </constant>
            <constant name="Green">
                <comment>00ff00</comment>
            </constant>
            <constant name="Blue">
                <comment>0000ff</comment>
            </constant>
        </enum>
        <interface name="ImmutablesTest.Shape" qualified="cz.habarta.typescript.generator.ImmutablesTest.Shape" scope="public" included="true">
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>kind</value>
                </argument>
            </annotation>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.ImmutablesTest.Square.class, name="square")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.ImmutablesTest.Rectangle.class, name="rectangle")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.ImmutablesTest.Circle.class, name="circle")</value>
                </argument>
            </annotation>
        </interface>
        <interface name="ImmutablesTest.Circle" qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle" scope="public" included="true">
            <interface qualified="cz.habarta.typescript.generator.ImmutablesTest.Shape"/>
            <method name="radius" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle.radius" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="double"/>
            </method>
            <annotation name="Value.Immutable" qualified="org.immutables.value.Value.Immutable"/>
            <annotation name="JsonSerialize" qualified="com.fasterxml.jackson.databind.annotation.JsonSerialize">
                <argument name="as" primitive="false" array="false">
                    <type qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </type>
                    <value>cz.habarta.typescript.generator.ImmutableCircle</value>
                </argument>
            </annotation>
            <annotation name="JsonDeserialize" qualified="com.fasterxml.jackson.databind.annotation.JsonDeserialize">
                <argument name="as" primitive="false" array="false">
                    <type qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </type>
                    <value>cz.habarta.typescript.generator.ImmutableCircle</value>
                </argument>
            </annotation>
        </interface>
        <interface name="GenericsTest.IdView" qualified="cz.habarta.typescript.generator.GenericsTest.IdView" scope="public" included="true">
            <generic name="T">
                <bound>java.io.Serializable</bound>
            </generic>
            <method name="getId" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.IdView.getId" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="T"/>
            </method>
        </interface>
        <interface name="GenericsTest.Entity1IdView" qualified="cz.habarta.typescript.generator.GenericsTest.Entity1IdView" scope="public" included="true">
            <interface qualified="cz.habarta.typescript.generator.GenericsTest.IdView">
                <generic qualified="cz.habarta.typescript.generator.GenericsTest.MyId"/>
            </interface>
        </interface>
        <interface name="CustomTypeMappingTest.CodedValue" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue" scope="public" included="true">
            <method name="getCode" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue.getCode" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
            <method name="getDefinition" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue.getDefinition" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
            <annotation name="JsonSerialize" qualified="com.fasterxml.jackson.databind.annotation.JsonSerialize">
                <argument name="using" primitive="false" array="false">
                    <type qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard>
<extendsBound qualified="com.fasterxml.jackson.databind.JsonSerializer"/>
                            </wildcard>
                        </generic>
                    </type>
                    <value>cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValueSerializer</value>
                </argument>
            </annotation>
        </interface>
        <interface name="CustomTypeMappingTest.MyInterfUsingEnum" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.MyInterfUsingEnum" scope="public" included="true">
            <method name="getSomeValue" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.MyInterfUsingEnum.getSomeValue" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.MyEnum"/>
            </method>
        </interface>
        <interface name="Jackson2PolymorphismTest.BadFieldClass" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.BadFieldClass" scope="public" included="true">
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>CLASS</value>
                </argument>
                <argument name="include" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.As"/>
                    <value>PROPERTY</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>@class</value>
                </argument>
            </annotation>
        </interface>
        <interface name="JaxrsApplicationTest.AbstractCrudResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AbstractCrudResource" scope="public" included="true">
            <generic name="ENTITY"/>
            <generic name="ID"/>
            <method name="get" signature="(ID)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AbstractCrudResource.get" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="id">
                    <type qualified="ID"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>id</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="ENTITY"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>{id}</value>
                    </argument>
                </annotation>
            </method>
        </interface>
        <interface name="JaxrsApplicationTest.AccountResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountResource" scope="public" included="true">
            <interface qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AbstractCrudResource">
                <generic qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountDto"/>
                <generic qualified="java.lang.Integer"/>
            </interface>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountResource.test" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>/test</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>/account</value>
                </argument>
            </annotation>
        </interface>
        <interface name="JavadocTest.InterfaceWithJavadoc" qualified="cz.habarta.typescript.generator.JavadocTest.InterfaceWithJavadoc" scope="public" included="true">
            <comment>Documentation for InterfaceWithJavadoc.</comment>
            <method name="getGetterPropery" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.InterfaceWithJavadoc.getGetterPropery" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Documentation for interface getter property.</comment>
                <tag name="@return" text="value of getterPropery"/>
                <tag name="@deprecated" text="replaced by something else"/>
                <return qualified="java.lang.String"/>
                <annotation name="Deprecated" qualified="java.lang.Deprecated"/>
            </method>
        </interface>
        <class name="SortedTypesTest" qualified="cz.habarta.typescript.generator.SortedTypesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SortedTypesTest" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testOrder1" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.testOrder1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testOrder2" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.testOrder2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="assertCorrectOrder" signature="(java.lang.Class&lt;?&gt;...)" qualified="cz.habarta.typescript.generator.SortedTypesTest.assertCorrectOrder" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <parameter name="classes">
                    <type qualified="java.lang.Class" dimension="[]">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </type>
                </parameter>
                <return qualified="void"/>
            </method>
        </class>
        <class name="SortedTypesTest.A" qualified="cz.habarta.typescript.generator.SortedTypesTest.A" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="A" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.A" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getYYY" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.A.getYYY" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="int"/>
            </method>
            <method name="getX" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.A.getX" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="int"/>
            </method>
        </class>
        <class name="SortedTypesTest.B" qualified="cz.habarta.typescript.generator.SortedTypesTest.B" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="B" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.B" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getX" signature="()" qualified="cz.habarta.typescript.generator.SortedTypesTest.B.getX" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="int"/>
            </method>
        </class>
        <class name="ClassesTest" qualified="cz.habarta.typescript.generator.ClassesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassesTest" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testInvalidSettings" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testInvalidSettings" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test">
                    <argument name="expected" primitive="false" array="false">
                        <type qualified="java.lang.Class">
                            <generic qualified="?">
<wildcard>
    <extendsBound qualified="java.lang.Throwable"/>
</wildcard>
                            </generic>
                        </type>
                        <value>java.lang.Exception</value>
                    </argument>
                </annotation>
            </method>
            <method name="testClass" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClass" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInheritedClass" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testInheritedClass" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassImplementsInterface" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClassImplementsInterface" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testComplexHierarchy" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testComplexHierarchy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassPatterns1" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClassPatterns1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassPatterns2" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClassPatterns2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassPatterns3" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClassPatterns3" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassPatterns4" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testClassPatterns4" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testConstructor" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testConstructor" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testConstructorWithGenericsAndInheritance" signature="()" qualified="cz.habarta.typescript.generator.ClassesTest.testConstructorWithGenericsAndInheritance" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="DummyClassEnum" qualified="cz.habarta.typescript.generator.DummyClassEnum" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DummyClassEnum" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.DummyClassEnum" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="value">
                    <type qualified="java.lang.String"/>
                </parameter>
                <annotation name="JsonCreator" qualified="com.fasterxml.jackson.annotation.JsonCreator"/>
            </constructor>
            <method name="getValue" signature="()" qualified="cz.habarta.typescript.generator.DummyClassEnum.getValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
                <annotation name="JsonValue" qualified="com.fasterxml.jackson.annotation.JsonValue"/>
            </method>
            <method name="toString" signature="()" qualified="cz.habarta.typescript.generator.DummyClassEnum.toString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <field name="ATYPE" qualified="cz.habarta.typescript.generator.DummyClassEnum.ATYPE" scope="public" volatile="false" transient="false" static="true" final="true">
                <type qualified="cz.habarta.typescript.generator.DummyClassEnum"/>
            </field>
            <field name="BTYPE" qualified="cz.habarta.typescript.generator.DummyClassEnum.BTYPE" scope="public" volatile="false" transient="false" static="true" final="true">
                <type qualified="cz.habarta.typescript.generator.DummyClassEnum"/>
            </field>
            <field name="CTYPE" qualified="cz.habarta.typescript.generator.DummyClassEnum.CTYPE" scope="public" volatile="false" transient="false" static="true" final="true">
                <type qualified="cz.habarta.typescript.generator.DummyClassEnum"/>
            </field>
        </class>
        <class name="OptionalAnnotationTest" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="OptionalAnnotationTest" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testJackson1OptionalAnnotation" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJackson1OptionalAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJackson1NoAnnotation" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJackson1NoAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJackson2OptionalAnnotation" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJackson2OptionalAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJackson2NoAnnotation" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJackson2NoAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavaxNullableWithJackson1" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJavaxNullableWithJackson1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavaxNullableWithJackson2" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testJavaxNullableWithJackson2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNullableTypeAnnotation" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testNullableTypeAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testAnnotatedPrivateField" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testAnnotatedPrivateField" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testOptionalAndRequiredProperty" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.testOptionalAndRequiredProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="OptionalAnnotationTest.SearchDTO" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.SearchDTO" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SearchDTO" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.SearchDTO" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getYear" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.SearchDTO.getYear" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.Integer"/>
            </method>
            <method name="getSelectedId" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.SearchDTO.getSelectedId" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.Long"/>
            </method>
        </class>
        <class name="OptionalAnnotationTest.ClassWithMarkedField" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.ClassWithMarkedField" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithMarkedField" signature="()" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.ClassWithMarkedField" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="a" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.ClassWithMarkedField.a" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="b" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.ClassWithMarkedField.b" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="OptionalAnnotationTest.MarkerAnnotation" qualified="cz.habarta.typescript.generator.OptionalAnnotationTest.MarkerAnnotation"/>
            </field>
        </class>
        <class name="ImmutableCircle" qualified="cz.habarta.typescript.generator.ImmutableCircle" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Immutable implementation of {@link ImmutablesTest.Circle}.
 &lt;p&gt;
 Use the builder to create immutable instances:
 {@code new ImmutablesTest.Circle.Builder()}.</comment>
            <class qualified="java.lang.Object"/>
            <interface qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle"/>
            <method name="radius" signature="()" qualified="cz.habarta.typescript.generator.ImmutableCircle.radius" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <tag name="@return" text="The value of the {@code radius} attribute"/>
                <return qualified="double"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>radius</value>
                    </argument>
                </annotation>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="withRadius" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableCircle.withRadius" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Copy the current immutable object by setting a value for the {@link ImmutablesTest.Circle#radius() radius} attribute.
 A value strict bits equality used to prevent copying of the same value by returning {@code this}.</comment>
                <tag name="@param" text="value A new value for radius"/>
                <tag name="@return" text="A modified copy of the {@code this} object"/>
                <parameter name="value">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutableCircle"/>
            </method>
            <method name="equals" signature="(java.lang.Object)" qualified="cz.habarta.typescript.generator.ImmutableCircle.equals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>This instance is equal to all instances of {@code ImmutableCircle} that have equal attribute values.</comment>
                <tag name="@return" text="{@code true} if {@code this} is equal to {@code another} instance"/>
                <parameter name="another">
                    <type qualified="java.lang.Object"/>
                    <annotation name="Nullable" qualified="javax.annotation.Nullable"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hashCode" signature="()" qualified="cz.habarta.typescript.generator.ImmutableCircle.hashCode" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Computes a hash code from attributes: {@code radius}.</comment>
                <tag name="@return" text="hashCode value"/>
                <return qualified="int"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="toString" signature="()" qualified="cz.habarta.typescript.generator.ImmutableCircle.toString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Prints the immutable value {@code Circle} with attribute values.</comment>
                <tag name="@return" text="A string representation of the value"/>
                <return qualified="java.lang.String"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="copyOf" signature="(cz.habarta.typescript.generator.ImmutablesTest.Circle)" qualified="cz.habarta.typescript.generator.ImmutableCircle.copyOf" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>Creates an immutable copy of a {@link ImmutablesTest.Circle} value.
 Uses accessors to get values to initialize the new immutable instance.
 If an instance is already immutable, it is returned as is.</comment>
                <tag name="@param" text="instance The instance to copy"/>
                <tag name="@return" text="A copied immutable Circle instance"/>
                <parameter name="instance">
                    <type qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutableCircle"/>
            </method>
            <annotation name="Generated" qualified="org.immutables.value.Generated">
                <argument name="from" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>ImmutablesTest.Circle</value>
                </argument>
                <argument name="generator" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>Immutables</value>
                </argument>
            </annotation>
            <annotation name="SuppressWarnings" qualified="java.lang.SuppressWarnings">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>all</value>
                </argument>
            </annotation>
            <annotation name="SuppressFBWarnings" qualified="edu.umd.cs.findbugs.annotations.SuppressFBWarnings"/>
            <annotation name="ParametersAreNonnullByDefault" qualified="javax.annotation.ParametersAreNonnullByDefault"/>
            <annotation name="Generated" qualified="javax.annotation.Generated">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>org.immutables.processor.ProxyProcessor</value>
                </argument>
            </annotation>
            <annotation name="Immutable" qualified="javax.annotation.concurrent.Immutable"/>
        </class>
        <class name="ImmutableCircle.Builder" qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Builds instances of type {@link ImmutableCircle ImmutableCircle}.
 Initialize attributes and then invoke the {@link #build()} method to create an
 immutable instance.
 &lt;p&gt;&lt;em&gt;{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
 but instead used immediately to create instances.&lt;/em&gt;</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="Builder" signature="()" qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Creates a builder for {@link ImmutableCircle ImmutableCircle} instances.</comment>
            </constructor>
            <method name="from" signature="(cz.habarta.typescript.generator.ImmutablesTest.Circle)" qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder.from" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Fill a builder with attribute values from the provided {@code Circle} instance.
 Regular attribute values will be replaced with those from the given instance.
 Absent optional values will not replace present values.</comment>
                <tag name="@param" text="instance The instance from which to copy values"/>
                <tag name="@return" text="{@code this} builder for use in a chained invocation"/>
                <parameter name="instance">
                    <type qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle.Builder"/>
            </method>
            <method name="radius" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder.radius" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Initializes the value for the {@link ImmutablesTest.Circle#radius() radius} attribute.</comment>
                <tag name="@param" text="radius The value for radius"/>
                <tag name="@return" text="{@code this} builder for use in a chained invocation"/>
                <parameter name="radius">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle.Builder"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>radius</value>
                    </argument>
                </annotation>
            </method>
            <method name="build" signature="()" qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder.build" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Builds a new {@link ImmutableCircle ImmutableCircle}.</comment>
                <tag name="@return" text="An immutable instance of Circle"/>
                <tag name="@throws" text="java.lang.IllegalStateException if any required attributes are missing"/>
                <return qualified="cz.habarta.typescript.generator.ImmutableCircle"/>
            </method>
            <annotation name="Generated" qualified="org.immutables.value.Generated">
                <argument name="from" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>ImmutablesTest.Circle</value>
                </argument>
                <argument name="generator" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>Immutables</value>
                </argument>
            </annotation>
            <annotation name="NotThreadSafe" qualified="javax.annotation.concurrent.NotThreadSafe"/>
        </class>
        <class name="ImmutableRectangle" qualified="cz.habarta.typescript.generator.ImmutableRectangle" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Immutable implementation of {@link ImmutablesTest.Rectangle}.
 &lt;p&gt;
 Use the builder to create immutable instances:
 {@code new ImmutablesTest.Rectangle.Builder()}.</comment>
            <class qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle"/>
            <method name="width" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.width" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <tag name="@return" text="The value of the {@code width} attribute"/>
                <return qualified="double"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>width</value>
                    </argument>
                </annotation>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="height" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.height" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <tag name="@return" text="The value of the {@code height} attribute"/>
                <return qualified="double"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>height</value>
                    </argument>
                </annotation>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="withWidth" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.withWidth" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Copy the current immutable object by setting a value for the {@link ImmutablesTest.Rectangle#width() width} attribute.
 A value strict bits equality used to prevent copying of the same value by returning {@code this}.</comment>
                <tag name="@param" text="value A new value for width"/>
                <tag name="@return" text="A modified copy of the {@code this} object"/>
                <parameter name="value">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutableRectangle"/>
            </method>
            <method name="withHeight" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.withHeight" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Copy the current immutable object by setting a value for the {@link ImmutablesTest.Rectangle#height() height} attribute.
 A value strict bits equality used to prevent copying of the same value by returning {@code this}.</comment>
                <tag name="@param" text="value A new value for height"/>
                <tag name="@return" text="A modified copy of the {@code this} object"/>
                <parameter name="value">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutableRectangle"/>
            </method>
            <method name="equals" signature="(java.lang.Object)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.equals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>This instance is equal to all instances of {@code ImmutableRectangle} that have equal attribute values.</comment>
                <tag name="@return" text="{@code true} if {@code this} is equal to {@code another} instance"/>
                <parameter name="another">
                    <type qualified="java.lang.Object"/>
                    <annotation name="Nullable" qualified="javax.annotation.Nullable"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hashCode" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.hashCode" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Computes a hash code from attributes: {@code width}, {@code height}.</comment>
                <tag name="@return" text="hashCode value"/>
                <return qualified="int"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="toString" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.toString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Prints the immutable value {@code Rectangle} with attribute values.</comment>
                <tag name="@return" text="A string representation of the value"/>
                <return qualified="java.lang.String"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="copyOf" signature="(cz.habarta.typescript.generator.ImmutablesTest.Rectangle)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.copyOf" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>Creates an immutable copy of a {@link ImmutablesTest.Rectangle} value.
 Uses accessors to get values to initialize the new immutable instance.
 If an instance is already immutable, it is returned as is.</comment>
                <tag name="@param" text="instance The instance to copy"/>
                <tag name="@return" text="A copied immutable Rectangle instance"/>
                <parameter name="instance">
                    <type qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutableRectangle"/>
            </method>
            <annotation name="Generated" qualified="org.immutables.value.Generated">
                <argument name="from" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>ImmutablesTest.Rectangle</value>
                </argument>
                <argument name="generator" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>Immutables</value>
                </argument>
            </annotation>
            <annotation name="SuppressWarnings" qualified="java.lang.SuppressWarnings">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>all</value>
                </argument>
            </annotation>
            <annotation name="SuppressFBWarnings" qualified="edu.umd.cs.findbugs.annotations.SuppressFBWarnings"/>
            <annotation name="ParametersAreNonnullByDefault" qualified="javax.annotation.ParametersAreNonnullByDefault"/>
            <annotation name="Generated" qualified="javax.annotation.Generated">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>org.immutables.processor.ProxyProcessor</value>
                </argument>
            </annotation>
            <annotation name="Immutable" qualified="javax.annotation.concurrent.Immutable"/>
        </class>
        <class name="ImmutableRectangle.Builder" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Builds instances of type {@link ImmutableRectangle ImmutableRectangle}.
 Initialize attributes and then invoke the {@link #build()} method to create an
 immutable instance.
 &lt;p&gt;&lt;em&gt;{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
 but instead used immediately to create instances.&lt;/em&gt;</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="Builder" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Creates a builder for {@link ImmutableRectangle ImmutableRectangle} instances.</comment>
            </constructor>
            <method name="from" signature="(cz.habarta.typescript.generator.ImmutablesTest.Rectangle)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder.from" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Fill a builder with attribute values from the provided {@code Rectangle} instance.
 Regular attribute values will be replaced with those from the given instance.
 Absent optional values will not replace present values.</comment>
                <tag name="@param" text="instance The instance from which to copy values"/>
                <tag name="@return" text="{@code this} builder for use in a chained invocation"/>
                <parameter name="instance">
                    <type qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder"/>
            </method>
            <method name="width" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder.width" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Initializes the value for the {@link ImmutablesTest.Rectangle#width() width} attribute.</comment>
                <tag name="@param" text="width The value for width"/>
                <tag name="@return" text="{@code this} builder for use in a chained invocation"/>
                <parameter name="width">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>width</value>
                    </argument>
                </annotation>
            </method>
            <method name="height" signature="(double)" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder.height" scope="public" abstract="false" final="true" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Initializes the value for the {@link ImmutablesTest.Rectangle#height() height} attribute.</comment>
                <tag name="@param" text="height The value for height"/>
                <tag name="@return" text="{@code this} builder for use in a chained invocation"/>
                <parameter name="height">
                    <type qualified="double"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>height</value>
                    </argument>
                </annotation>
            </method>
            <method name="build" signature="()" qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder.build" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Builds a new {@link ImmutableRectangle ImmutableRectangle}.</comment>
                <tag name="@return" text="An immutable instance of Rectangle"/>
                <tag name="@throws" text="java.lang.IllegalStateException if any required attributes are missing"/>
                <return qualified="cz.habarta.typescript.generator.ImmutableRectangle"/>
            </method>
            <annotation name="Generated" qualified="org.immutables.value.Generated">
                <argument name="from" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>ImmutablesTest.Rectangle</value>
                </argument>
                <argument name="generator" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>Immutables</value>
                </argument>
            </annotation>
            <annotation name="NotThreadSafe" qualified="javax.annotation.concurrent.NotThreadSafe"/>
        </class>
        <class name="ImmutablesTest" qualified="cz.habarta.typescript.generator.ImmutablesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ImmutablesTest" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testImmutables" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.testImmutables" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="ImmutablesTest.Square" qualified="cz.habarta.typescript.generator.ImmutablesTest.Square" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <interface qualified="cz.habarta.typescript.generator.ImmutablesTest.Shape"/>
            <constructor name="Square" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Square" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="size" qualified="cz.habarta.typescript.generator.ImmutablesTest.Square.size" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="double"/>
            </field>
        </class>
        <class name="ImmutablesTest.Rectangle" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle" scope="public" abstract="true" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <interface qualified="cz.habarta.typescript.generator.ImmutablesTest.Shape"/>
            <constructor name="Rectangle" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="width" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.width" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="double"/>
            </method>
            <method name="height" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.height" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="double"/>
            </method>
            <method name="builder" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.builder" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder"/>
            </method>
            <annotation name="Value.Immutable" qualified="org.immutables.value.Value.Immutable"/>
            <annotation name="JsonSerialize" qualified="com.fasterxml.jackson.databind.annotation.JsonSerialize">
                <argument name="as" primitive="false" array="false">
                    <type qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </type>
                    <value>cz.habarta.typescript.generator.ImmutableRectangle</value>
                </argument>
            </annotation>
            <annotation name="JsonDeserialize" qualified="com.fasterxml.jackson.databind.annotation.JsonDeserialize">
                <argument name="as" primitive="false" array="false">
                    <type qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </type>
                    <value>cz.habarta.typescript.generator.ImmutableRectangle</value>
                </argument>
            </annotation>
        </class>
        <class name="ImmutablesTest.Rectangle.Builder" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.ImmutableRectangle.Builder"/>
            <constructor name="Builder" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Rectangle.Builder" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="ImmutablesTest.Circle.Builder" qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle.Builder" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.ImmutableCircle.Builder"/>
            <constructor name="Builder" signature="()" qualified="cz.habarta.typescript.generator.ImmutablesTest.Circle.Builder" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="PathTemplateTest" qualified="cz.habarta.typescript.generator.PathTemplateTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="PathTemplateTest" signature="()" qualified="cz.habarta.typescript.generator.PathTemplateTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.PathTemplateTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="DefaultTypeProcessorTest" qualified="cz.habarta.typescript.generator.DefaultTypeProcessorTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DefaultTypeProcessorTest" signature="()" qualified="cz.habarta.typescript.generator.DefaultTypeProcessorTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testTypeConversion" signature="()" qualified="cz.habarta.typescript.generator.DefaultTypeProcessorTest.testTypeConversion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWildcards" signature="()" qualified="cz.habarta.typescript.generator.DefaultTypeProcessorTest.testWildcards" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.NoSuchFieldException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="getTestContext" signature="(cz.habarta.typescript.generator.TypeProcessor)" qualified="cz.habarta.typescript.generator.DefaultTypeProcessorTest.getTestContext" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="typeProcessor">
                    <type qualified="cz.habarta.typescript.generator.TypeProcessor"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.TypeProcessor.Context"/>
            </method>
        </class>
        <class name="GenericsTest" qualified="cz.habarta.typescript.generator.GenericsTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="GenericsTest" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testAdvancedGenerics" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testAdvancedGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWildcardGeneric" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testWildcardGeneric" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNonGenericExtends" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testNonGenericExtends" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testImplements" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testImplements" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericsWithoutTypeArgument" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testGenericsWithoutTypeArgument" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericArray" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testGenericArray" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testArbitraryGenericParameter" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testArbitraryGenericParameter" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSpecificTypeInGeneratedClass" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.testSpecificTypeInGeneratedClass" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="GenericsTest.MyId" qualified="cz.habarta.typescript.generator.GenericsTest.MyId" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="true">
            <class qualified="java.lang.Object"/>
            <interface qualified="java.io.Serializable"/>
            <constructor name="MyId" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.MyId" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="GenericsTest.Entity1View" qualified="cz.habarta.typescript.generator.GenericsTest.Entity1View" scope="public" abstract="true" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <interface qualified="cz.habarta.typescript.generator.GenericsTest.Entity1IdView"/>
            <constructor name="Entity1View" signature="()" qualified="cz.habarta.typescript.generator.GenericsTest.Entity1View" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.GenericsTest.Entity1View.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="TsTypeTest" qualified="cz.habarta.typescript.generator.TsTypeTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="TsTypeTest" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testEquals" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest.testEquals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNotEquals" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest.testNotEquals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNotEqualsNull" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest.testNotEqualsNull" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTypeParentheses" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest.testTypeParentheses" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testObjectType" signature="()" qualified="cz.habarta.typescript.generator.TsTypeTest.testObjectType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="CustomTypeAliasesTest" qualified="cz.habarta.typescript.generator.CustomTypeAliasesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="CustomTypeAliasesTest" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeAliasesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testGeneric" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeAliasesTest.testGeneric" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNonGeneric" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeAliasesTest.testNonGeneric" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="InputTest" qualified="cz.habarta.typescript.generator.InputTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="InputTest" signature="()" qualified="cz.habarta.typescript.generator.InputTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testScanner" signature="()" qualified="cz.habarta.typescript.generator.InputTest.testScanner" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testMatches" signature="()" qualified="cz.habarta.typescript.generator.InputTest.testMatches" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassesWithAnnotations" signature="()" qualified="cz.habarta.typescript.generator.InputTest.testClassesWithAnnotations" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassesImplementingInterfaces" signature="()" qualified="cz.habarta.typescript.generator.InputTest.testClassesImplementingInterfaces" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassesExtendingClasses" signature="()" qualified="cz.habarta.typescript.generator.InputTest.testClassesExtendingClasses" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="OptionalTest" qualified="cz.habarta.typescript.generator.OptionalTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="OptionalTest" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJackson2OptionalSupport" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testJackson2OptionalSupport" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDeclarationQuestionMark" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testDeclarationQuestionMark" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDeclarationNullableType" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testDeclarationNullableType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDeclarationQuestionMarkAndNullableType" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testDeclarationQuestionMarkAndNullableType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDeclarationNullableAndUndefinableType" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testDeclarationNullableAndUndefinableType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDeclarationUndefinableType" signature="()" qualified="cz.habarta.typescript.generator.OptionalTest.testDeclarationUndefinableType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="NamingTest" qualified="cz.habarta.typescript.generator.NamingTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="NamingTest" signature="()" qualified="cz.habarta.typescript.generator.NamingTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testConflictReport" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testConflictReport" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test">
                    <argument name="expected" primitive="false" array="false">
                        <type qualified="java.lang.Class">
                            <generic qualified="?">
<wildcard>
    <extendsBound qualified="java.lang.Throwable"/>
</wildcard>
                            </generic>
                        </type>
                        <value>cz.habarta.typescript.generator.compiler.SymbolTable.NameConflictException</value>
                    </argument>
                </annotation>
            </method>
            <method name="testConflictResolved" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testConflictResolved" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testConflictPrevented" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testConflictPrevented" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTypeNamingFunction" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testTypeNamingFunction" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTypeNamingFunctionReturnsUndefined" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testTypeNamingFunctionReturnsUndefined" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testCombinations" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testCombinations" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTypeScriptKeywords" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testTypeScriptKeywords" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNamespaced" signature="()" qualified="cz.habarta.typescript.generator.NamingTest.testNamespaced" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="ObjectAsIdTest" qualified="cz.habarta.typescript.generator.ObjectAsIdTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ObjectAsIdTest" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testJackson" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testJackson" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJacksonLists" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testJacksonLists" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJacksonNestedMaps" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testJacksonNestedMaps" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testLists" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testLists" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNestedMaps" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testNestedMaps" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenerics" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDisableObjectIdentity" signature="()" qualified="cz.habarta.typescript.generator.ObjectAsIdTest.testDisableObjectIdentity" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="MapEntryTest" qualified="cz.habarta.typescript.generator.MapEntryTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="MapEntryTest" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testDefaultShapes" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.testDefaultShapes" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testOverriddenShapes" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.testOverriddenShapes" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testListOfMapEntry" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.testListOfMapEntry" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="MapEntryTest.ClassWithEntries" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithEntries" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="entry1" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries.entry1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.MapEntryTest.Entry1">
                    <generic qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean"/>
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="entry2" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries.entry2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.MapEntryTest.Entry2">
                    <generic qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean"/>
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="entry3" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithEntries.entry3" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map.Entry">
                    <generic qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean"/>
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
        </class>
        <class name="MapEntryTest.Entry1" qualified="cz.habarta.typescript.generator.MapEntryTest.Entry1" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="true">
            <generic name="K"/>
            <generic name="V"/>
            <class qualified="java.util.AbstractMap.SimpleEntry">
                <generic qualified="K"/>
                <generic qualified="V"/>
            </class>
            <constructor name="Entry1" signature="(K, V)" qualified="cz.habarta.typescript.generator.MapEntryTest.Entry1" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="K"/>
                </parameter>
                <parameter name="value">
                    <type qualified="V"/>
                </parameter>
            </constructor>
            <annotation name="JsonFormat" qualified="com.fasterxml.jackson.annotation.JsonFormat">
                <argument name="shape" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonFormat.Shape"/>
                    <value>NATURAL</value>
                </argument>
            </annotation>
        </class>
        <class name="MapEntryTest.Entry2" qualified="cz.habarta.typescript.generator.MapEntryTest.Entry2" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="true">
            <generic name="K"/>
            <generic name="V"/>
            <class qualified="java.util.AbstractMap.SimpleEntry">
                <generic qualified="K"/>
                <generic qualified="V"/>
            </class>
            <constructor name="Entry2" signature="(K, V)" qualified="cz.habarta.typescript.generator.MapEntryTest.Entry2" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="K"/>
                </parameter>
                <parameter name="value">
                    <type qualified="V"/>
                </parameter>
            </constructor>
            <annotation name="JsonFormat" qualified="com.fasterxml.jackson.annotation.JsonFormat">
                <argument name="shape" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonFormat.Shape"/>
                    <value>OBJECT</value>
                </argument>
            </annotation>
        </class>
        <class name="MapEntryTest.MyBean" qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="MyBean" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="f0">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <method name="toString" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean.toString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <field name="f0" qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean.f0" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="f1" qualified="cz.habarta.typescript.generator.MapEntryTest.MyBean.f1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="boolean"/>
            </field>
        </class>
        <class name="MapEntryTest.ClassWithListOfEntries" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithListOfEntries" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithListOfEntries" signature="()" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithListOfEntries" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="entries1" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithListOfEntries.entries1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="cz.habarta.typescript.generator.MapEntryTest.Entry1">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.String"/>
                    </generic>
                </type>
            </field>
            <field name="entries2" qualified="cz.habarta.typescript.generator.MapEntryTest.ClassWithListOfEntries.entries2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="cz.habarta.typescript.generator.MapEntryTest.Entry2">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.String"/>
                    </generic>
                </type>
            </field>
        </class>
        <class name="Jackson2ParserTest" qualified="cz.habarta.typescript.generator.Jackson2ParserTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Jackson2ParserTest" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testChangedNameProperty" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testChangedNameProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testConflictingJsonTypeInfoProperty" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testConflictingJsonTypeInfoProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTaggedUnion" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testTaggedUnion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
            </method>
            <method name="testOptionalJsonProperty" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testOptionalJsonProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testOptionalXmlElement" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testOptionalXmlElement" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testStandardEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testStandardEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testStringPropertyEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testStringPropertyEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNumberPropertyEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testNumberPropertyEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJsonNumberFieldValuedEnum" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testJsonNumberFieldValuedEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJsonNumberMethodValuedEnum" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testJsonNumberMethodValuedEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testMethodEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testMethodEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testToStringEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testToStringEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJsonPropertyEnumValue" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testJsonPropertyEnumValue" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testIgnoredProperty" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testIgnoredProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testVisibilityConfiguration" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testVisibilityConfiguration" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJsonNode" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testJsonNode" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDescriptions" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.testDescriptions" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="Jackson2ParserTest.DummyBeanJackson2" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.DummyBeanJackson2" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DummyBeanJackson2" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.DummyBeanJackson2" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="_changed_name_property" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.DummyBeanJackson2._changed_name_property" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>changedNameProperty</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="Jackson2ParserTest.InheritedClass" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.InheritedClass" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="InheritedClass" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.InheritedClass" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="include" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.As"/>
                    <value>PROPERTY</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>type</value>
                </argument>
            </annotation>
            <field name="type" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.InheritedClass.type" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="Jackson2ParserTest.ClassWithOptionals" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithOptionals" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getJname4" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.getJname4" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>true</value>
                    </argument>
                </annotation>
            </method>
            <method name="getXname4" signature="()" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.getXname4" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
                <annotation name="XmlElement" qualified="javax.xml.bind.annotation.XmlElement">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>true</value>
                    </argument>
                </annotation>
            </method>
            <field name="oname1" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.oname1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="oname2" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.oname2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Optional">
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="jname1" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.jname1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty"/>
            </field>
            <field name="jname2" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.jname2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>false</value>
                    </argument>
                </annotation>
            </field>
            <field name="jname3" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.jname3" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>true</value>
                    </argument>
                </annotation>
            </field>
            <field name="xname1" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.xname1" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="XmlElement" qualified="javax.xml.bind.annotation.XmlElement"/>
            </field>
            <field name="xname2" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.xname2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="XmlElement" qualified="javax.xml.bind.annotation.XmlElement">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>false</value>
                    </argument>
                </annotation>
            </field>
            <field name="xname3" qualified="cz.habarta.typescript.generator.Jackson2ParserTest.ClassWithOptionals.xname3" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <annotation name="XmlElement" qualified="javax.xml.bind.annotation.XmlElement">
                    <argument name="required" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>true</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="DuplicatePropertyTest" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DuplicatePropertyTest" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testJacksonDuplicateProperty" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.testJacksonDuplicateProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDuplicateProperty" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.testDuplicateProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="DuplicatePropertyTest.DuplicateKindUsage" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKindUsage" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DuplicateKindUsage" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKindUsage" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="duplicateKind" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKindUsage.duplicateKind" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind"/>
            </field>
        </class>
        <class name="DuplicatePropertyTest.DuplicateKind" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind" scope="public" abstract="true" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DuplicateKind" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>kind</value>
                </argument>
                <argument name="include" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.As"/>
                    <value>PROPERTY</value>
                </argument>
            </annotation>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind1.class, name="kind_1")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind2.class, name="kind_2")</value>
                </argument>
            </annotation>
        </class>
        <class name="DuplicatePropertyTest.DuplicateKind1" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind1" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind"/>
            <constructor name="DuplicateKind1" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind1" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="kind" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind1.kind" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="DuplicatePropertyTest.DuplicateKind2" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind2" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind"/>
            <constructor name="DuplicateKind2" signature="()" qualified="cz.habarta.typescript.generator.DuplicatePropertyTest.DuplicateKind2" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="TestUtils" qualified="cz.habarta.typescript.generator.TestUtils" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <method name="settings" signature="()" qualified="cz.habarta.typescript.generator.TestUtils.settings" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.Settings"/>
            </method>
            <method name="compileType" signature="(cz.habarta.typescript.generator.Settings, java.lang.reflect.Type)" qualified="cz.habarta.typescript.generator.TestUtils.compileType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="settings">
                    <type qualified="cz.habarta.typescript.generator.Settings"/>
                </parameter>
                <parameter name="type">
                    <type qualified="java.lang.reflect.Type"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.TsType"/>
            </method>
            <method name="readFile" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.TestUtils.readFile" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="file">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="TestEnums" qualified="cz.habarta.typescript.generator.TestEnums" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="TestEnums" signature="()" qualified="cz.habarta.typescript.generator.TestEnums" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="ModuleDependenciesTest" qualified="cz.habarta.typescript.generator.ModuleDependenciesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ModuleDependenciesTest" signature="()" qualified="cz.habarta.typescript.generator.ModuleDependenciesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.ModuleDependenciesTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="CustomTypeMappingTest" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="CustomTypeMappingTest" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumAsMap" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.testEnumAsMap" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSuperTypeString" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.testSuperTypeString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Tests that custom mapping a superclass to a primitive doesn't cause errors.</comment>
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericClassWithCustomMapping" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.testGenericClassWithCustomMapping" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="CustomTypeMappingTest.CodedValueSerializer" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValueSerializer" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="true">
            <class qualified="com.fasterxml.jackson.databind.ser.std.StdSerializer">
                <generic qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue"/>
            </class>
            <constructor name="CodedValueSerializer" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValueSerializer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <constructor name="CodedValueSerializer" signature="(java.lang.Class&lt;cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue&gt;)" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValueSerializer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="t">
                    <type qualified="java.lang.Class">
                        <generic qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue"/>
                    </type>
                </parameter>
            </constructor>
            <method name="serialize" signature="(cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)" qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValueSerializer.serialize" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="value">
                    <type qualified="cz.habarta.typescript.generator.CustomTypeMappingTest.CodedValue"/>
                </parameter>
                <parameter name="gen">
                    <type qualified="com.fasterxml.jackson.core.JsonGenerator"/>
                </parameter>
                <parameter name="provider">
                    <type qualified="com.fasterxml.jackson.databind.SerializerProvider"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="java.io.IOException"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
        <class name="JsonUnwrappedTest" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JsonUnwrappedTest" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testPrivateField" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.testPrivateField" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
            </method>
        </class>
        <class name="JsonUnwrappedTest.Person" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Person" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="parentA" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person.parentA" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent"/>
                <annotation name="JsonUnwrapped" qualified="com.fasterxml.jackson.annotation.JsonUnwrapped">
                    <argument name="prefix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>A</value>
                    </argument>
                    <argument name="suffix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>A</value>
                    </argument>
                </annotation>
            </field>
            <field name="parentB" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person.parentB" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent"/>
                <annotation name="JsonUnwrapped" qualified="com.fasterxml.jackson.annotation.JsonUnwrapped">
                    <argument name="prefix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>B</value>
                    </argument>
                    <argument name="suffix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>B</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="JsonUnwrappedTest.Parent" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Parent" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="age" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent.age" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="int"/>
            </field>
            <field name="name" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name"/>
                <annotation name="JsonUnwrapped" qualified="com.fasterxml.jackson.annotation.JsonUnwrapped"/>
            </field>
            <field name="name2" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent.name2" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name"/>
                <annotation name="JsonUnwrapped" qualified="com.fasterxml.jackson.annotation.JsonUnwrapped">
                    <argument name="prefix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>_</value>
                    </argument>
                    <argument name="suffix" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>2</value>
                    </argument>
                </annotation>
            </field>
            <field name="name3" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Parent.name3" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name"/>
                <annotation name="JsonUnwrapped" qualified="com.fasterxml.jackson.annotation.JsonUnwrapped">
                    <argument name="enabled" primitive="true" array="false">
                        <type qualified="boolean"/>
                        <value>false</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="JsonUnwrappedTest.Name" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Name" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="first" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name.first" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="last" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name.last" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JsonUnwrappedTest.Person2" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person2" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Person2" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person2" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getName" signature="()" qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Person2.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.JsonUnwrappedTest.Name"/>
            </method>
        </class>
        <class name="UtilsTest" qualified="cz.habarta.typescript.generator.UtilsTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="UtilsTest" signature="()" qualified="cz.habarta.typescript.generator.UtilsTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testReplaceExtension" signature="()" qualified="cz.habarta.typescript.generator.UtilsTest.testReplaceExtension" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGlobToRegexp" signature="()" qualified="cz.habarta.typescript.generator.UtilsTest.testGlobToRegexp" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="NullabilityTest" qualified="cz.habarta.typescript.generator.NullabilityTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="NullabilityTest" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testVariants" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest.testVariants" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testCombinationsOfOptionalAndNullable" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest.testCombinationsOfOptionalAndNullable" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNullableAnnotationTarget" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest.testNullableAnnotationTarget" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test">
                    <argument name="expected" primitive="false" array="false">
                        <type qualified="java.lang.Class">
                            <generic qualified="?">
<wildcard>
    <extendsBound qualified="java.lang.Throwable"/>
</wildcard>
                            </generic>
                        </type>
                        <value>java.lang.RuntimeException</value>
                    </argument>
                </annotation>
            </method>
            <method name="testDate" signature="()" qualified="cz.habarta.typescript.generator.NullabilityTest.testDate" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="JaxbTest" qualified="cz.habarta.typescript.generator.JaxbTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JaxbTest" signature="()" qualified="cz.habarta.typescript.generator.JaxbTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.JaxbTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJAXBElement" signature="()" qualified="cz.habarta.typescript.generator.JaxbTest.testJAXBElement" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="PersonTest" qualified="cz.habarta.typescript.generator.PersonTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="PersonTest" signature="()" qualified="cz.habarta.typescript.generator.PersonTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.PersonTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="DummyBean" qualified="cz.habarta.typescript.generator.DummyBean" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DummyBean" signature="()" qualified="cz.habarta.typescript.generator.DummyBean" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="SuppressWarnings" qualified="java.lang.SuppressWarnings">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>rawtypes</value>
                </argument>
            </annotation>
            <field name="firstProperty" qualified="cz.habarta.typescript.generator.DummyBean.firstProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="intProperty" qualified="cz.habarta.typescript.generator.DummyBean.intProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="int"/>
            </field>
            <field name="integerProperty" qualified="cz.habarta.typescript.generator.DummyBean.integerProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.Integer"/>
            </field>
            <field name="booleanProperty" qualified="cz.habarta.typescript.generator.DummyBean.booleanProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="boolean"/>
            </field>
            <field name="dateProperty" qualified="cz.habarta.typescript.generator.DummyBean.dateProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Date"/>
            </field>
            <field name="stringArrayProperty" qualified="cz.habarta.typescript.generator.DummyBean.stringArrayProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String" dimension="[]"/>
            </field>
            <field name="stringListProperty" qualified="cz.habarta.typescript.generator.DummyBean.stringListProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="stringArrayListProperty" qualified="cz.habarta.typescript.generator.DummyBean.stringArrayListProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.ArrayList">
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="dummyEnumProperty" qualified="cz.habarta.typescript.generator.DummyBean.dummyEnumProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.DummyEnum"/>
            </field>
            <field name="stringMapProperty" qualified="cz.habarta.typescript.generator.DummyBean.stringMapProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="listOfListOfIntegerProperty" qualified="cz.habarta.typescript.generator.DummyBean.listOfListOfIntegerProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.Integer"/>
                    </generic>
                </type>
            </field>
            <field name="mapOfDummyBeanProperty" qualified="cz.habarta.typescript.generator.DummyBean.mapOfDummyBeanProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="cz.habarta.typescript.generator.DummyBean"/>
                </type>
            </field>
            <field name="rawListProperty" qualified="cz.habarta.typescript.generator.DummyBean.rawListProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List"/>
            </field>
            <field name="rawMapProperty" qualified="cz.habarta.typescript.generator.DummyBean.rawMapProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map"/>
            </field>
            <field name="listOfDummyEnumProperty" qualified="cz.habarta.typescript.generator.DummyBean.listOfDummyEnumProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="cz.habarta.typescript.generator.DummyEnum"/>
                </type>
            </field>
            <field name="mapOfDummyEnumProperty" qualified="cz.habarta.typescript.generator.DummyBean.mapOfDummyEnumProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="cz.habarta.typescript.generator.DummyEnum"/>
                </type>
            </field>
            <field name="mapOfListOfMapOfDummyEnumProperty" qualified="cz.habarta.typescript.generator.DummyBean.mapOfListOfMapOfDummyEnumProperty" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="java.util.List">
                        <generic qualified="java.util.Map">
                            <generic qualified="java.lang.String"/>
                            <generic qualified="cz.habarta.typescript.generator.DummyEnum"/>
                        </generic>
                    </generic>
                </type>
            </field>
        </class>
        <class name="Jackson2PolymorphismTest" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Jackson2PolymorphismTest" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testPropertyNameQuoting" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.testPropertyNameQuoting" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInterfaceOrder" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.testInterfaceOrder" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="Jackson2PolymorphismTest.Z" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Z" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Z" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Z" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(cz.habarta.typescript.generator.Jackson2PolymorphismTest.Y.class)</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(cz.habarta.typescript.generator.Jackson2PolymorphismTest.X.class)</value>
                </argument>
            </annotation>
        </class>
        <class name="Jackson2PolymorphismTest.Y" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Y" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Z"/>
            <constructor name="Y" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Y" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="Jackson2PolymorphismTest.X" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.X" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.Z"/>
            <constructor name="X" signature="()" qualified="cz.habarta.typescript.generator.Jackson2PolymorphismTest.X" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="IncludeExcludePropertyTest" qualified="cz.habarta.typescript.generator.IncludeExcludePropertyTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="IncludeExcludePropertyTest" signature="()" qualified="cz.habarta.typescript.generator.IncludeExcludePropertyTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testInclude" signature="()" qualified="cz.habarta.typescript.generator.IncludeExcludePropertyTest.testInclude" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExclude" signature="()" qualified="cz.habarta.typescript.generator.IncludeExcludePropertyTest.testExclude" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testBoth" signature="()" qualified="cz.habarta.typescript.generator.IncludeExcludePropertyTest.testBoth" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="GenericsResolverTest" qualified="cz.habarta.typescript.generator.GenericsResolverTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="GenericsResolverTest" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testStringField" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testStringField" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testListOfStringField" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testListOfStringField" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testMapOfStringAndListOfLongField" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testMapOfStringAndListOfLongField" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInheritancePath" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testInheritancePath" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInheritancePathWithUnresolvedVariable1" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testInheritancePathWithUnresolvedVariable1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInheritancePathWithUnresolvedVariable2" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testInheritancePathWithUnresolvedVariable2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericVariableMappingToBase1" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testGenericVariableMappingToBase1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericVariableMappingToBase2" signature="()" qualified="cz.habarta.typescript.generator.GenericsResolverTest.testGenericVariableMappingToBase2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="ModulesAndNamespacesTest" qualified="cz.habarta.typescript.generator.ModulesAndNamespacesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ModulesAndNamespacesTest" signature="()" qualified="cz.habarta.typescript.generator.ModulesAndNamespacesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testNamespacesAndModules" signature="()" qualified="cz.habarta.typescript.generator.ModulesAndNamespacesTest.testNamespacesAndModules" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="files" signature="(java.io.File, boolean)" qualified="cz.habarta.typescript.generator.ModulesAndNamespacesTest.files" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="outputDir">
                    <type qualified="java.io.File"/>
                </parameter>
                <parameter name="mapPackages">
                    <type qualified="boolean"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </class>
        <class name="Jackson1ParserTest" qualified="cz.habarta.typescript.generator.Jackson1ParserTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Jackson1ParserTest" signature="()" qualified="cz.habarta.typescript.generator.Jackson1ParserTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.Jackson1ParserTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="InterfaceTest" qualified="cz.habarta.typescript.generator.InterfaceTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="InterfaceTest" signature="()" qualified="cz.habarta.typescript.generator.InterfaceTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.InterfaceTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testReadOnlyProperties" signature="()" qualified="cz.habarta.typescript.generator.InterfaceTest.testReadOnlyProperties" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="GenericCustomTypeMappingsTest" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="GenericCustomTypeMappingsTest" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testListWrapper" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testListWrapper" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testMap" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testMap" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericMappingToString" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testGenericMappingToString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInvalidGenerics" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testInvalidGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenerics" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testUnwrap" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testUnwrap" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testMapStringString" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testMapStringString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testAlternativeSyntax" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testAlternativeSyntax" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testAlternativeSyntaxWithArray" signature="()" qualified="cz.habarta.typescript.generator.GenericCustomTypeMappingsTest.testAlternativeSyntaxWithArray" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="ExtensionTest" qualified="cz.habarta.typescript.generator.ExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testBeforeTsExtension" signature="()" qualified="cz.habarta.typescript.generator.ExtensionTest.testBeforeTsExtension" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="CovariantPropertiesTest" qualified="cz.habarta.typescript.generator.CovariantPropertiesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="CovariantPropertiesTest" signature="()" qualified="cz.habarta.typescript.generator.CovariantPropertiesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.CovariantPropertiesTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="StyleConfigurationTest" qualified="cz.habarta.typescript.generator.StyleConfigurationTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="StyleConfigurationTest" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testOutputWithCustomStyle" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.testOutputWithCustomStyle" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTypeNameCustomizations" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.testTypeNameCustomizations" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="StyleConfigurationTest.A" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.A" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="A" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.A" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getX" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.A.getX" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="int"/>
            </method>
            <method name="getB" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.A.getB" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.StyleConfigurationTest.B"/>
            </method>
        </class>
        <class name="StyleConfigurationTest.B" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.B" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="B" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.B" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getS" signature="()" qualified="cz.habarta.typescript.generator.StyleConfigurationTest.B.getS" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="Person" qualified="cz.habarta.typescript.generator.Person" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Person" signature="()" qualified="cz.habarta.typescript.generator.Person" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.Person.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="age" qualified="cz.habarta.typescript.generator.Person.age" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="int"/>
            </field>
            <field name="hasChildren" qualified="cz.habarta.typescript.generator.Person.hasChildren" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="boolean"/>
            </field>
            <field name="tags" qualified="cz.habarta.typescript.generator.Person.tags" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
            <field name="emails" qualified="cz.habarta.typescript.generator.Person.emails" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
        </class>
        <class name="DecoratorsTest" qualified="cz.habarta.typescript.generator.DecoratorsTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DecoratorsTest" signature="()" qualified="cz.habarta.typescript.generator.DecoratorsTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.DecoratorsTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="DecoratorsTest.City" qualified="cz.habarta.typescript.generator.DecoratorsTest.City" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="City" signature="()" qualified="cz.habarta.typescript.generator.DecoratorsTest.City" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.DecoratorsTest.City.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="DateTest" qualified="cz.habarta.typescript.generator.DateTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DateTest" signature="()" qualified="cz.habarta.typescript.generator.DateTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testDate_forJavaUtilDate" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDate_forJavaUtilDate" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDate_forJodaDateTime" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDate_forJodaDateTime" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDateAsNumber_forJavaUtilDate" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDateAsNumber_forJavaUtilDate" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDateAsNumber_forJodaDateTime" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDateAsNumber_forJodaDateTime" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDateAsString_forJavaUtilDate" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDateAsString_forJavaUtilDate" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDateAsString_forJodaDateTime" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDateAsString_forJodaDateTime" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDateAsString_forJava8DateTime" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testDateAsString_forJava8DateTime" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJava8DateWithJackson2CustomSerialization" signature="()" qualified="cz.habarta.typescript.generator.DateTest.testJava8DateWithJackson2CustomSerialization" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.DateTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="com.fasterxml.jackson.core.JsonProcessingException"/>
            </method>
        </class>
        <class name="FullyQualifiedNamesTest" qualified="cz.habarta.typescript.generator.FullyQualifiedNamesTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="FullyQualifiedNamesTest" signature="()" qualified="cz.habarta.typescript.generator.FullyQualifiedNamesTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.FullyQualifiedNamesTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNested" signature="()" qualified="cz.habarta.typescript.generator.FullyQualifiedNamesTest.testNested" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="ModelCompilerTest" qualified="cz.habarta.typescript.generator.ModelCompilerTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ModelCompilerTest" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testEnum" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDate" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testDate" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExclusion" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testExclusion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExclusionPattern" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testExclusionPattern" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testIntermediateInterfacesWithoutTypeParams" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testIntermediateInterfacesWithoutTypeParams" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testIntermediateInterfacesWithTypeParams" signature="()" qualified="cz.habarta.typescript.generator.ModelCompilerTest.testIntermediateInterfacesWithTypeParams" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="SwaggerTest" qualified="cz.habarta.typescript.generator.SwaggerTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SwaggerTest" signature="()" qualified="cz.habarta.typescript.generator.SwaggerTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.SwaggerTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDocumentation" signature="()" qualified="cz.habarta.typescript.generator.SwaggerTest.testDocumentation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testDataType" signature="()" qualified="cz.habarta.typescript.generator.SwaggerTest.testDataType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSwaggerOff" signature="()" qualified="cz.habarta.typescript.generator.SwaggerTest.testSwaggerOff" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="NumberEnumTest" qualified="cz.habarta.typescript.generator.NumberEnumTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="NumberEnumTest" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testParser" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest.testParser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNonConstEnum" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest.testNonConstEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNonConstAnnotationEnum" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest.testNonConstAnnotationEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavadoc" signature="()" qualified="cz.habarta.typescript.generator.NumberEnumTest.testJavadoc" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="TypeGuardsForJackson2PolymorphismExtensionTest" qualified="cz.habarta.typescript.generator.TypeGuardsForJackson2PolymorphismExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="TypeGuardsForJackson2PolymorphismExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.TypeGuardsForJackson2PolymorphismExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="basicTest" signature="()" qualified="cz.habarta.typescript.generator.TypeGuardsForJackson2PolymorphismExtensionTest.basicTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInTypeScriptGenerator" signature="()" qualified="cz.habarta.typescript.generator.TypeGuardsForJackson2PolymorphismExtensionTest.testInTypeScriptGenerator" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="JaxrsApplicationTest" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JaxrsApplicationTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testReturnedTypesFromApplication" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testReturnedTypesFromApplication" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testReturnedTypesFromResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testReturnedTypesFromResource" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWithParsingWithExplicitApplication" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testWithParsingWithExplicitApplication" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWithParsingWithDefaultApplication" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testWithParsingWithDefaultApplication" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExcludedResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testExcludedResource" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExcludedType" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testExcludedType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="basicInterfaceTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.basicInterfaceTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="complexInterfaceTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.complexInterfaceTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="methodNameConflictTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.methodNameConflictTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="customizationTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.customizationTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="basicClientTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.basicClientTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="clientCustomizationTest" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.clientCustomizationTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNamespacingPerResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testNamespacingPerResource" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testNamespacingByAnnotation" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testNamespacingByAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavadoc" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testJavadoc" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGettingValidIdentifierName" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testGettingValidIdentifierName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumQueryParam" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testEnumQueryParam" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testBeanParam" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testBeanParam" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testRegExpInPath" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testRegExpInPath" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericResources" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.testGenericResources" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </class>
        <class name="JaxrsApplicationTest.OrganizationApplication" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationApplication" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="javax.ws.rs.core.Application"/>
            <constructor name="OrganizationApplication" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationApplication" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getClasses" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationApplication.getClasses" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.util.Set">
                    <generic qualified="java.lang.Class">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </generic>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <annotation name="ApplicationPath" qualified="javax.ws.rs.ApplicationPath">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>api</value>
                </argument>
            </annotation>
        </class>
        <class name="JaxrsApplicationTest.OrganizationsResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationsResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="OrganizationsResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationsResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="searchOrganizations" signature="(java.lang.String, int)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationsResource.searchOrganizations" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="oranizationName">
                    <type qualified="java.lang.String"/>
                    <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>name</value>
                        </argument>
                    </annotation>
                </parameter>
                <parameter name="searchLimit">
                    <type qualified="int"/>
                    <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>search-limit</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization"/>
                </return>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <method name="getOrganizationResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationsResource.getOrganizationResource" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationResource"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>{ organizationCode : [a-z]+ }/{organizationId}</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Api" qualified="io.swagger.annotations.Api">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>OrgApi</value>
                </argument>
            </annotation>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>organizations</value>
                </argument>
            </annotation>
            <field name="organizationId" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationsResource.organizationId" scope="protected" volatile="false" transient="false" static="false" final="false">
                <type qualified="long"/>
                <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>organizationId</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="JaxrsApplicationTest.OrganizationResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="OrganizationResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getOrganization" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationResource.getOrganization" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <method name="setOrganization" signature="(java.lang.String, cz.habarta.typescript.generator.JaxrsApplicationTest.Organization)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.OrganizationResource.setOrganization" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="organizationCode">
                    <type qualified="java.lang.String"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>organizationCode</value>
                        </argument>
                    </annotation>
                </parameter>
                <parameter name="organization">
                    <type qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="PUT" qualified="javax.ws.rs.PUT"/>
            </method>
        </class>
        <class name="JaxrsApplicationTest.Organization" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Organization" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Organization.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JaxrsApplicationTest.PersonResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.PersonResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="PersonResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.PersonResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getPerson" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.PersonResource.getPerson" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Returns person with specified ID.</comment>
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <method name="getAddress" signature="(long)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.PersonResource.getAddress" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="addressId">
                    <type qualified="long"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>address-id</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Address"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>address/{address-id}</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>people/{personId}</value>
                </argument>
            </annotation>
            <field name="personId" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.PersonResource.personId" scope="protected" volatile="false" transient="false" static="false" final="false">
                <type qualified="long"/>
                <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>personId</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="JaxrsApplicationTest.Person" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Person" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <field name="name" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JaxrsApplicationTest.Address" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Address" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Address" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Address" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="name" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Address.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JaxrsApplicationTest.NameConflictResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="NameConflictResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="person" signature="(cz.habarta.typescript.generator.JaxrsApplicationTest.Person)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource.person" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="person">
                    <type qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                <annotation name="POST" qualified="javax.ws.rs.POST"/>
            </method>
            <method name="person" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource.person" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <method name="person" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource.person" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="search">
                    <type qualified="java.lang.String"/>
                    <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>search</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>search</value>
                    </argument>
                </annotation>
            </method>
            <method name="person" signature="(long)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.NameConflictResource.person" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="personId">
                    <type qualified="long"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>person-id</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.Person"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>{person-id:.+}</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>conflict</value>
                </argument>
            </annotation>
            <annotation name="Consumes" qualified="javax.ws.rs.Consumes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>application/json</value>
                </argument>
            </annotation>
            <annotation name="Produces" qualified="javax.ws.rs.Produces">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>application/json</value>
                </argument>
            </annotation>
        </class>
        <class name="JaxrsApplicationTest.EnumQueryParamResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.EnumQueryParamResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="EnumQueryParamResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.EnumQueryParamResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getFoo" signature="(cz.habarta.typescript.generator.JaxrsApplicationTest.TargetEnum)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.EnumQueryParamResource.getFoo" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="target">
                    <type qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.TargetEnum"/>
                    <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>target</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>somePath</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>enum-query-param</value>
                </argument>
            </annotation>
        </class>
        <class name="JaxrsApplicationTest.SearchParams1" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams1" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SearchParams1" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams1" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="JaxrsApplicationTest.SearchParams2" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams2" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SearchParams2" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams2" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="setDescription" signature="(java.lang.String)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams2.setDescription" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="description">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>description</value>
                    </argument>
                </annotation>
            </method>
        </class>
        <class name="JaxrsApplicationTest.BeanParamResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.BeanParamResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="BeanParamResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.BeanParamResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getItems" signature="(cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams1, cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams2, java.lang.String)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.BeanParamResource.getItems" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="params1">
                    <type qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams1"/>
                    <annotation name="BeanParam" qualified="javax.ws.rs.BeanParam"/>
                </parameter>
                <parameter name="params2">
                    <type qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.SearchParams2"/>
                    <annotation name="BeanParam" qualified="javax.ws.rs.BeanParam"/>
                </parameter>
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                    <annotation name="QueryParam" qualified="javax.ws.rs.QueryParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>message</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>bean-param</value>
                </argument>
            </annotation>
            <annotation name="Produces" qualified="javax.ws.rs.Produces">
                <argument name="value" primitive="false" array="true">
                    <type qualified="java.lang.String" dimension="[]"/>
                    <value>application/json</value>
                </argument>
            </annotation>
        </class>
        <class name="JaxrsApplicationTest.RegExpResource" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.RegExpResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="RegExpResource" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.RegExpResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getWithId" signature="(long)" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.RegExpResource.getWithId" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="id">
                    <type qualified="long"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>id</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="java.lang.String"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>{id: [0-9]{1,99}}</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>objects</value>
                </argument>
            </annotation>
        </class>
        <class name="JaxrsApplicationTest.AccountDto" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountDto" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="AccountDto" signature="()" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountDto" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="id" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountDto.id" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.Integer"/>
            </field>
            <field name="name" qualified="cz.habarta.typescript.generator.JaxrsApplicationTest.AccountDto.name" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JakartaRsApplicationTest.PersonResource" qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.PersonResource" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="PersonResource" signature="()" qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.PersonResource" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getPerson" signature="()" qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.PersonResource.getPerson" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Returns person with specified ID.</comment>
                <return qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.Person"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
            </method>
            <method name="getAddress" signature="(long)" qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.PersonResource.getAddress" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="addressId">
                    <type qualified="long"/>
                    <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                        <argument name="value" primitive="false" array="false">
                            <type qualified="java.lang.String"/>
                            <value>address-id</value>
                        </argument>
                    </annotation>
                </parameter>
                <return qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.Address"/>
                <annotation name="GET" qualified="javax.ws.rs.GET"/>
                <annotation name="Path" qualified="javax.ws.rs.Path">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>address/{address-id}</value>
                    </argument>
                </annotation>
            </method>
            <annotation name="Path" qualified="javax.ws.rs.Path">
                <argument name="value" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>people/{personId}</value>
                </argument>
            </annotation>
            <field name="personId" qualified="cz.habarta.typescript.generator.JakartaRsApplicationTest.PersonResource.personId" scope="protected" volatile="false" transient="false" static="false" final="false">
                <type qualified="long"/>
                <annotation name="PathParam" qualified="javax.ws.rs.PathParam">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>personId</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="CustomTypeConversionTest" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="CustomTypeConversionTest" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testCustomTypeConversion" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.testCustomTypeConversion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testCustomOptional" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.testCustomOptional" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="CustomTypeConversionTest.A" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.A" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="A" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.A" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getX" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.A.getX" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.B"/>
            </method>
        </class>
        <class name="CustomTypeConversionTest.B" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.B" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="B" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.B" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getX" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.B.getX" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.B"/>
            </method>
        </class>
        <class name="CustomTypeConversionTest.CustomOptionalUsage" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptionalUsage" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="CustomOptionalUsage" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptionalUsage" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="maybeObject" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptionalUsage.maybeObject" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptional">
                    <generic qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.SomeObject"/>
                </type>
            </field>
            <field name="maybeDate" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptionalUsage.maybeDate" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptional">
                    <generic qualified="java.util.Date"/>
                </type>
            </field>
        </class>
        <class name="CustomTypeConversionTest.SomeObject" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.SomeObject" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="SomeObject" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.SomeObject" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="CustomTypeConversionTest.CustomOptional" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptional" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="java.lang.Object"/>
            <constructor name="CustomOptional" signature="()" qualified="cz.habarta.typescript.generator.CustomTypeConversionTest.CustomOptional" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="TaggedUnionsTest" qualified="cz.habarta.typescript.generator.TaggedUnionsTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="TaggedUnionsTest" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testTaggedUnions" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testTaggedUnions" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTaggedUnionsWithInterfaces" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testTaggedUnionsWithInterfaces" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTaggedUnionsWithOverlappingInterfaces" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testTaggedUnionsWithOverlappingInterfaces" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTaggedUnionsDisabled" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testTaggedUnionsDisabled" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testTaggedUnionsWithDiamond" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testTaggedUnionsWithDiamond" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testIdClass" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testIdClass" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWithTypeParameter" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testWithTypeParameter" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
            </method>
            <method name="testAsyncResultWithGenerics" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testAsyncResultWithGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testBaseWithGenerics" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testBaseWithGenerics" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testGenericBaseWithNonGenericSubType" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.testGenericBaseWithNonGenericSubType" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="TaggedUnionsTest.AsyncOperationResult" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult" scope="public" abstract="true" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="java.lang.Object"/>
            <constructor name="AsyncOperationResult" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>type</value>
                </argument>
            </annotation>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.TaggedUnionsTest.InProgressResult.class, name="in-progress")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.TaggedUnionsTest.FinishedResult.class, name="finished")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.TaggedUnionsTest.FailedResult.class, name="error")</value>
                </argument>
            </annotation>
        </class>
        <class name="TaggedUnionsTest.InProgressResult" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.InProgressResult" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult">
                <generic qualified="T"/>
            </class>
            <constructor name="InProgressResult" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.InProgressResult" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="progress" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.InProgressResult.progress" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="double"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.FinishedResult" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FinishedResult" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult">
                <generic qualified="T"/>
            </class>
            <constructor name="FinishedResult" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FinishedResult" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="value" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FinishedResult.value" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="T"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.FailedResult" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FailedResult" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult">
                <generic qualified="T"/>
            </class>
            <constructor name="FailedResult" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FailedResult" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="error" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FailedResult.error" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.AsyncUsage" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncUsage" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="AsyncUsage" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncUsage" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="result" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncUsage.result" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.TaggedUnionsTest.AsyncOperationResult">
                    <generic qualified="java.lang.String"/>
                </type>
            </field>
        </class>
        <class name="TaggedUnionsTest.Base" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Base" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="A"/>
            <generic name="B"/>
            <class qualified="java.lang.Object"/>
            <constructor name="Base" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Base" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="property" primitive="false" array="false">
                    <type qualified="java.lang.String"/>
                    <value>type</value>
                </argument>
            </annotation>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(cz.habarta.typescript.generator.TaggedUnionsTest.FlippedGenericParameters.class)</value>
                </argument>
            </annotation>
        </class>
        <class name="TaggedUnionsTest.ResultA" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.ResultA" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="A"/>
            <generic name="B"/>
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Base">
                <generic qualified="A"/>
                <generic qualified="B"/>
            </class>
            <constructor name="ResultA" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.ResultA" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="a" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.ResultA.a" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="A"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.FlippedGenericParameters" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FlippedGenericParameters" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="A"/>
            <generic name="B"/>
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Base">
                <generic qualified="B"/>
                <generic qualified="A"/>
            </class>
            <constructor name="FlippedGenericParameters" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FlippedGenericParameters" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="aFlipped" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FlippedGenericParameters.aFlipped" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="A"/>
            </field>
            <field name="bFlipped" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.FlippedGenericParameters.bFlipped" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="B"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.BaseUsage" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.BaseUsage" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="BaseUsage" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.BaseUsage" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="result" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.BaseUsage.result" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Base">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="java.lang.Number"/>
                </type>
            </field>
        </class>
        <class name="TaggedUnionsTest.Entity" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity" scope="public" abstract="true" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <class qualified="java.lang.Object"/>
            <constructor name="Entity" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <annotation name="JsonTypeInfo" qualified="com.fasterxml.jackson.annotation.JsonTypeInfo">
                <argument name="use" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.Id"/>
                    <value>NAME</value>
                </argument>
                <argument name="include" primitive="false" array="false">
                    <type qualified="com.fasterxml.jackson.annotation.JsonTypeInfo.As"/>
                    <value>PROPERTY</value>
                </argument>
            </annotation>
            <annotation name="JsonSubTypes" qualified="com.fasterxml.jackson.annotation.JsonSubTypes">
                <argument name="value" primitive="false" array="true">
                    <type qualified="com.fasterxml.jackson.annotation.JsonSubTypes.Type" dimension="[]"/>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.TaggedUnionsTest.Foo.class, name="Foo")</value>
                    <value>@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value=cz.habarta.typescript.generator.TaggedUnionsTest.Bar.class, name="Bar")</value>
                </argument>
            </annotation>
            <field name="id" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity.id" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="T"/>
            </field>
        </class>
        <class name="TaggedUnionsTest.Foo" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Foo" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity">
                <generic qualified="java.lang.String"/>
            </class>
            <constructor name="Foo" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Foo" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="TaggedUnionsTest.Bar" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Bar" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity">
                <generic qualified="java.lang.Integer"/>
            </class>
            <constructor name="Bar" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Bar" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="TaggedUnionsTest.EntityCollection" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.EntityCollection" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="EntityCollection" signature="()" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.EntityCollection" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="entities" qualified="cz.habarta.typescript.generator.TaggedUnionsTest.EntityCollection.entities" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="cz.habarta.typescript.generator.TaggedUnionsTest.Entity">
                        <generic qualified="?">
                            <wildcard/>
                        </generic>
                    </generic>
                </type>
            </field>
        </class>
        <class name="ModelParserTest" qualified="cz.habarta.typescript.generator.ModelParserTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ModelParserTest" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testClassDiscovery1" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscovery1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassDiscovery2" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscovery2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassDiscovery3" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscovery3" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassDiscoveryExcludeNodeClassA" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscoveryExcludeNodeClassA" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassDiscoveryExcludeTag" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscoveryExcludeTag" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testClassDiscoveryExcludeNodeClassB" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testClassDiscoveryExcludeNodeClassB" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExcludedInputDirectly" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testExcludedInputDirectly" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExcludedInputInList" signature="()" qualified="cz.habarta.typescript.generator.ModelParserTest.testExcludedInputInList" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="EnumConstantsExtensionTest" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="EnumConstantsExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="basicTest" signature="()" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest.basicTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInTypeScriptGenerator" signature="()" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest.testInTypeScriptGenerator" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSorting" signature="()" qualified="cz.habarta.typescript.generator.EnumConstantsExtensionTest.testSorting" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="EnumTest" qualified="cz.habarta.typescript.generator.EnumTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="EnumTest" signature="()" qualified="cz.habarta.typescript.generator.EnumTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testEnumAsUnion" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumAsUnion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSingleEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testSingleEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumAsInlineUnion" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumAsInlineUnion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumAsNumberBasedEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumAsNumberBasedEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumAsEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumAsEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumsWithClassEnumPattern" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumsWithClassEnumPattern" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumWithJsonPropertyAnnotations" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumWithJsonPropertyAnnotations" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumWithJsonValueMethodAnnotation" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumWithJsonValueMethodAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumWithJsonValueFieldAnnotation" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumWithJsonValueFieldAnnotation" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumUsingToString" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumUsingToString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEmptyEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEmptyEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testExcludeObjectEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testExcludeObjectEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testObjectEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testObjectEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavaLangEnum1" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testJavaLangEnum1" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testJavaLangEnum2" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testJavaLangEnum2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_asUnion" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_asUnion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_asInlineUnion" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_asInlineUnion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_asEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_asEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_asNumberBasedEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_asNumberBasedEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_MixedEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_MixedEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnumMapKeys_NumberEnum" signature="()" qualified="cz.habarta.typescript.generator.EnumTest.testEnumMapKeys_NumberEnum" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="main" signature="(java.lang.String[])" qualified="cz.habarta.typescript.generator.EnumTest.main" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="args">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
            </method>
        </class>
        <class name="JsonDeserializationTest" qualified="cz.habarta.typescript.generator.JsonDeserializationTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JsonDeserializationTest" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.io.IOException"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="jaxrsApplicationClientTest" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.jaxrsApplicationClientTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="JsonDeserializationTest.Address" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Address" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Address" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Address" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="street" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Address.street" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="city" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Address.city" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JsonDeserializationTest.PagedList" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.PagedList" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <generic name="T"/>
            <generic name="A"/>
            <class qualified="java.lang.Object"/>
            <constructor name="PagedList" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.PagedList" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="page" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.PagedList.page" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="int"/>
            </field>
            <field name="items" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.PagedList.items" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="T"/>
                </type>
            </field>
            <field name="additionalInfo" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.PagedList.additionalInfo" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="A"/>
            </field>
        </class>
        <class name="JsonDeserializationTest.Order" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Order" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Order" signature="()" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Order" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="id" qualified="cz.habarta.typescript.generator.JsonDeserializationTest.Order.id" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JavadocTest" qualified="cz.habarta.typescript.generator.JavadocTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JavadocTest" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testJavadoc" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.testJavadoc" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="JavadocTest.ClassWithJavadoc" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Documentation for ClassWithJavadoc. First line.
 Second line.</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithJavadoc" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getGetterPropery" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc.getGetterPropery" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Documentation for getter property.</comment>
                <return qualified="java.lang.String"/>
            </method>
            <field name="documentedField" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc.documentedField" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <comment>Documentation for documentedField.</comment>
            </field>
            <field name="documentedEnumField" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc.documentedEnumField" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.DummyEnum"/>
                <comment>Documentation for documentedEnumField.</comment>
            </field>
            <field name="originalName" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithJavadoc.originalName" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
                <comment>Documentation for renamed field.</comment>
                <annotation name="JsonProperty" qualified="com.fasterxml.jackson.annotation.JsonProperty">
                    <argument name="value" primitive="false" array="false">
                        <type qualified="java.lang.String"/>
                        <value>newName</value>
                    </argument>
                </annotation>
            </field>
        </class>
        <class name="JavadocTest.ClassWithoutJavadoc" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithoutJavadoc" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithoutJavadoc" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithoutJavadoc" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="undocumentedField" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithoutJavadoc.undocumentedField" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JavadocTest.ClassWithEmbeddedExample" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithEmbeddedExample" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>This class comes with an embedded example!

 &lt;pre&gt;{@code
 public class Example {
     // indentation and line breaks are kept

     {@literal @}SuppressWarnings
     public List&lt;String&gt; generics() {
         return null;
     }
 }
 }&lt;/pre&gt;</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithEmbeddedExample" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithEmbeddedExample" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="field" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithEmbeddedExample.field" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="JavadocTest.ClassWithBrElements" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithBrElements" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Class documentation &lt;br&gt;
 ------------------- &lt;br/&gt;
 Some documentation &lt;br /&gt; for this class.&lt;br&gt;</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithBrElements" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithBrElements" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
        <class name="JavadocTest.ClassWithPElements" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithPElements" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>First sentence.
 
 &lt;p&gt; Long
 paragraph &lt;/p&gt;
 
 &lt;p&gt;Second
 paragraph&lt;/p&gt;</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="ClassWithPElements" signature="()" qualified="cz.habarta.typescript.generator.JavadocTest.ClassWithPElements" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
    </package>
    <package name="cz.habarta.typescript.generator.ext">
        <class name="BeanPropertyPathExtensionTest" qualified="cz.habarta.typescript.generator.ext.BeanPropertyPathExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="BeanPropertyPathExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ext.BeanPropertyPathExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="basicTest" signature="()" qualified="cz.habarta.typescript.generator.ext.BeanPropertyPathExtensionTest.basicTest" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <exception qualified="java.lang.Exception"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="OnePossiblePropertyValueAssigningExtensionTest" qualified="cz.habarta.typescript.generator.ext.OnePossiblePropertyValueAssigningExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="OnePossiblePropertyValueAssigningExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ext.OnePossiblePropertyValueAssigningExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testGeneration" signature="()" qualified="cz.habarta.typescript.generator.ext.OnePossiblePropertyValueAssigningExtensionTest.testGeneration" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="AxiosClientExtensionTest" qualified="cz.habarta.typescript.generator.ext.AxiosClientExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="AxiosClientExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ext.AxiosClientExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.ext.AxiosClientExtensionTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="RequiredPropertyConstructorExtensionTest" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="RequiredPropertyConstructorExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="testBasicWithReadOnly" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testBasicWithReadOnly" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testBasicWithConfiguration" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testBasicWithConfiguration" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testBasicWithoutReadOnly" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testBasicWithoutReadOnly" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testEnums" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testEnums" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testInheritance" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testInheritance" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testOptionalParameters" signature="()" qualified="cz.habarta.typescript.generator.ext.RequiredPropertyConstructorExtensionTest.testOptionalParameters" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="PropertyPolymorphismExtensionTest" qualified="cz.habarta.typescript.generator.ext.PropertyPolymorphismExtensionTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="PropertyPolymorphismExtensionTest" signature="()" qualified="cz.habarta.typescript.generator.ext.PropertyPolymorphismExtensionTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.ext.PropertyPolymorphismExtensionTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testWithConfiguration" signature="()" qualified="cz.habarta.typescript.generator.ext.PropertyPolymorphismExtensionTest.testWithConfiguration" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
    </package>
    <package name="cz.habarta.typescript.generator.p1">
        <enum name="E" qualified="cz.habarta.typescript.generator.p1.E" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="cz.habarta.typescript.generator.p1.E"/>
            </class>
            <constant name="Left"/>
            <constant name="Right"/>
        </enum>
        <class name="C" qualified="cz.habarta.typescript.generator.p1.C" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.p2.B"/>
            <constructor name="C" signature="()" qualified="cz.habarta.typescript.generator.p1.C" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="sc" qualified="cz.habarta.typescript.generator.p1.C.sc" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="A" qualified="cz.habarta.typescript.generator.p1.A" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="A" signature="()" qualified="cz.habarta.typescript.generator.p1.A" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="sa" qualified="cz.habarta.typescript.generator.p1.A.sa" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
    </package>
    <package name="cz.habarta.typescript.generator.p2">
        <class name="B" qualified="cz.habarta.typescript.generator.p2.B" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="cz.habarta.typescript.generator.p1.A"/>
            <constructor name="B" signature="()" qualified="cz.habarta.typescript.generator.p2.B" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="sb" qualified="cz.habarta.typescript.generator.p2.B.sb" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
        </class>
        <class name="D" qualified="cz.habarta.typescript.generator.p2.D" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="D" signature="()" qualified="cz.habarta.typescript.generator.p2.D" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="a" qualified="cz.habarta.typescript.generator.p2.D.a" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.p1.A"/>
            </field>
            <field name="b" qualified="cz.habarta.typescript.generator.p2.D.b" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.p2.B"/>
            </field>
            <field name="c" qualified="cz.habarta.typescript.generator.p2.D.c" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.p1.C"/>
            </field>
            <field name="e" qualified="cz.habarta.typescript.generator.p2.D.e" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="cz.habarta.typescript.generator.p1.E"/>
            </field>
        </class>
    </package>
    <package name="cz.habarta.typescript.generator.parser">
        <class name="JsonbParserTest" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="JsonbParserTest" signature="()" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="before" signature="()" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.before" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Before" qualified="org.junit.Before"/>
            </method>
            <method name="tesJsonbProperty" signature="()" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.tesJsonbProperty" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="tesImplicitName" signature="()" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.tesImplicitName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
        <class name="JsonbParserTest.DirectName" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.DirectName" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="DirectName" signature="()" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.DirectName" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <field name="foo" qualified="cz.habarta.typescript.generator.parser.JsonbParserTest.DirectName.foo" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="int"/>
            </field>
        </class>
        <class name="GsonParserTest" qualified="cz.habarta.typescript.generator.parser.GsonParserTest" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="GsonParserTest" signature="()" qualified="cz.habarta.typescript.generator.parser.GsonParserTest" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="before" signature="()" qualified="cz.habarta.typescript.generator.parser.GsonParserTest.before" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Before" qualified="org.junit.Before"/>
            </method>
            <method name="test" signature="()" qualified="cz.habarta.typescript.generator.parser.GsonParserTest.test" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testPrivateFieldGenerated" signature="()" qualified="cz.habarta.typescript.generator.parser.GsonParserTest.testPrivateFieldGenerated" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
            <method name="testSerializedName" signature="()" qualified="cz.habarta.typescript.generator.parser.GsonParserTest.testSerializedName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="void"/>
                <annotation name="Test" qualified="org.junit.Test"/>
            </method>
        </class>
    </package>
    <package name="cz.habarta.typescript.generator.yield">
        <class name="KeywordInPackage" qualified="cz.habarta.typescript.generator.yield.KeywordInPackage" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="KeywordInPackage" signature="()" qualified="cz.habarta.typescript.generator.yield.KeywordInPackage" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
        </class>
    </package>
</root>
